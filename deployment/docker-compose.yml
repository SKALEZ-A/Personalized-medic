version: '3.8'

services:
  # Main API Service
  api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.api
    container_name: healthcare-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://healthcare_user:healthcare_password@db:5432/healthcare_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - db
      - redis
      - elasticsearch
    volumes:
      - ../data:/app/data
      - ../models:/app/models
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.frontend
    container_name: healthcare-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://api:8000
      - REACT_APP_ENVIRONMENT=production
    depends_on:
      - api
    networks:
      - healthcare-network
    restart: unless-stopped

  # Database Service
  db:
    image: postgres:15-alpine
    container_name: healthcare-db
    environment:
      - POSTGRES_DB=healthcare_db
      - POSTGRES_USER=healthcare_user
      - POSTGRES_PASSWORD=healthcare_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U healthcare_user -d healthcare_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: healthcare-redis
    command: redis-server --appendonly yes --requirepass healthcare_cache
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    container_name: healthcare-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=healthcare_search
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.0
    container_name: healthcare-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - healthcare-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: healthcare-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - frontend
    networks:
      - healthcare-network
    restart: unless-stopped

  # Background Task Worker
  worker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.worker
    container_name: healthcare-worker
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://healthcare_user:healthcare_password@db:5432/healthcare_db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - db
      - redis
    volumes:
      - ../data:/app/data
      - ../models:/app/models
    networks:
      - healthcare-network
    restart: unless-stopped
    command: celery -A tasks worker --loglevel=info

  # ML Model Serving
  ml_serving:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.ml
    container_name: healthcare-ml-serving
    ports:
      - "8501:8501"
    environment:
      - MODEL_PATH=/app/models
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../models:/app/models
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Service
  monitoring:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.monitoring
    container_name: healthcare-monitoring
    ports:
      - "9090:9090"  # Prometheus
      - "3001:3000"  # Grafana
    volumes:
      - prometheus_data:/prometheus
      - grafana_data:/var/lib/grafana
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - healthcare-network
    restart: unless-stopped

  # Backup Service
  backup:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.backup
    container_name: healthcare-backup
    environment:
      - DATABASE_URL=postgresql://healthcare_user:healthcare_password@db:5432/healthcare_db
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=healthcare-backups
    volumes:
      - ../data:/app/data:ro
      - backup_data:/app/backups
    networks:
      - healthcare-network
    restart: unless-stopped
    command: cron && tail -f /dev/null

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  nginx_logs:
  prometheus_data:
  grafana_data:
  backup_data:

networks:
  healthcare-network:
    driver: bridge
