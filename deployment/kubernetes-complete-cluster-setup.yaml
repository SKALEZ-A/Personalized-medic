---
apiVersion: v1
kind: Namespace
metadata:
  name: healthcare-platform
  labels:
    name: healthcare-platform
    environment: production

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: healthcare-platform-quota
  namespace: healthcare-platform
spec:
  hard:
    requests.cpu: "8"
    requests.memory: 16Gi
    limits.cpu: "16"
    limits.memory: 32Gi
    persistentvolumeclaims: "20"
    pods: "50"
    services: "20"
    secrets: "50"
    configmaps: "50"

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: healthcare-platform-network-policy
  namespace: healthcare-platform
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  - from:
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 27017 # MongoDB
    - protocol: TCP
      port: 9200  # Elasticsearch
  egress:
  - to:
    - podSelector: {}
  - to: []
    ports:
    - protocol: TCP
      port: 53  # DNS
    - protocol: UDP
      port: 53  # DNS
  - to: []
    ports:
    - protocol: TCP
      port: 443 # HTTPS outbound

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: healthcare-platform-config
  namespace: healthcare-platform
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  JWT_SECRET_KEY: "your-jwt-secret-key-here"
  JWT_ALGORITHM: "RS256"
  JWT_ACCESS_TOKEN_EXPIRE_MINUTES: "30"
  JWT_REFRESH_TOKEN_EXPIRE_DAYS: "7"
  DATABASE_URL: "postgresql://healthcare_user:healthcare_password@healthcare-postgresql:5432/healthcare_db"
  REDIS_URL: "redis://healthcare-redis-master:6379/0"
  MONGODB_URL: "mongodb://healthcare-mongodb:27017/healthcare"
  ELASTICSEARCH_URL: "http://healthcare-elasticsearch:9200"
  AWS_REGION: "us-east-1"
  AWS_S3_BUCKET: "healthcare-platform-storage"
  OPENAI_API_KEY: "your-openai-api-key"
  STRIPE_PUBLISHABLE_KEY: "your-stripe-publishable-key"
  STRIPE_SECRET_KEY: "your-stripe-secret-key"
  TWILIO_ACCOUNT_SID: "your-twilio-account-sid"
  TWILIO_AUTH_TOKEN: "your-twilio-auth-token"
  TWILIO_PHONE_NUMBER: "+1234567890"
  SENDGRID_API_KEY: "your-sendgrid-api-key"
  FIREBASE_PROJECT_ID: "healthcare-platform"
  BLOCKCHAIN_RPC_URL: "https://mainnet.infura.io/v3/your-infura-key"
  BLOCKCHAIN_PRIVATE_KEY: "your-blockchain-private-key"
  GENOMIC_DATA_PATH: "/data/genomic"
  MODEL_STORAGE_PATH: "/models"
  BACKUP_RETENTION_DAYS: "30"
  AUDIT_LOG_RETENTION_DAYS: "2555"
  RATE_LIMIT_REQUESTS_PER_HOUR: "1000"
  MAX_CONCURRENT_GENOMIC_ANALYSES: "10"
  HEALTH_CHECK_INTERVAL_SECONDS: "30"
  METRICS_RETENTION_DAYS: "90"

---
apiVersion: v1
kind: Secret
metadata:
  name: healthcare-platform-secrets
  namespace: healthcare-platform
type: Opaque
data:
  database-password: "cGFzc3dvcmQ="  # base64 encoded
  redis-password: "cmVkaXNwYXNz"  # base64 encoded
  jwt-secret: "and3c2VjcmV0"  # base64 encoded
  aws-access-key: "YWtzYWNjZXNz"  # base64 encoded
  aws-secret-key: "YXdzc2VjcmV0"  # base64 encoded
  openai-api-key: "b3BlbmFp"  # base64 encoded
  stripe-secret: "c3RyaXBl"  # base64 encoded
  twilio-token: "dHdpbGlv"  # base64 encoded
  sendgrid-key: "c2VuZGdyaWQ="  # base64 encoded
  firebase-key: "ZmlyZWJhc2U="  # base64 encoded
  blockchain-key: "YmxvY2tjaGFpbg=="  # base64 encoded

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: healthcare-postgresql-pvc
  namespace: healthcare-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: healthcare-redis-pvc
  namespace: healthcare-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: healthcare-mongodb-pvc
  namespace: healthcare-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: healthcare-elasticsearch-pvc
  namespace: healthcare-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: healthcare-models-pvc
  namespace: healthcare-platform
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Ti
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: healthcare-genomic-data-pvc
  namespace: healthcare-platform
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Ti
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: healthcare-backup-pvc
  namespace: healthcare-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Ti
  storageClassName: standard

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: healthcare-postgresql
  namespace: healthcare-platform
spec:
  serviceName: healthcare-postgresql
  replicas: 1
  selector:
    matchLabels:
      app: healthcare-postgresql
  template:
    metadata:
      labels:
        app: healthcare-postgresql
    spec:
      containers:
      - name: postgresql
        image: postgres:15
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_DB
          value: healthcare_db
        - name: POSTGRES_USER
          value: healthcare_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: healthcare-platform-secrets
              key: database-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - healthcare_user
            - -d
            - healthcare_db
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - healthcare_user
            - -d
            - healthcare_db
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgresql-data
        persistentVolumeClaim:
          claimName: healthcare-postgresql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: healthcare-postgresql
  namespace: healthcare-platform
  labels:
    app: healthcare-postgresql
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: healthcare-postgresql
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: healthcare-redis-master
  namespace: healthcare-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: healthcare-redis
      role: master
  template:
    metadata:
      labels:
        app: healthcare-redis
        role: master
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: healthcare-platform-secrets
              key: redis-password
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - 1gb
        - --maxmemory-policy
        - allkeys-lru
        - --appendonly
        - yes
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: healthcare-redis-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: healthcare-redis-slave
  namespace: healthcare-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: healthcare-redis
      role: slave
  template:
    metadata:
      labels:
        app: healthcare-redis
        role: slave
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: healthcare-platform-secrets
              key: redis-password
        - name: REDIS_MASTER_HOST
          value: healthcare-redis-master
        command:
        - redis-server
        - --slaveof
        - $(REDIS_MASTER_HOST)
        - "6379"
        - --masterauth
        - $(REDIS_PASSWORD)
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - 1gb
        - --maxmemory-policy
        - allkeys-lru
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3

---
apiVersion: v1
kind: Service
metadata:
  name: healthcare-redis-master
  namespace: healthcare-platform
  labels:
    app: healthcare-redis
    role: master
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: healthcare-redis
    role: master
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: healthcare-redis-slave
  namespace: healthcare-platform
  labels:
    app: healthcare-redis
    role: slave
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: healthcare-redis
    role: slave
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: healthcare-mongodb
  namespace: healthcare-platform
spec:
  serviceName: healthcare-mongodb
  replicas: 3
  selector:
    matchLabels:
      app: healthcare-mongodb
  template:
    metadata:
      labels:
        app: healthcare-mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:6
        ports:
        - containerPort: 27017
          name: mongodb
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: healthcare_admin
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: healthcare-platform-secrets
              key: database-password
        - name: MONGO_INITDB_DATABASE
          value: healthcare
        command:
        - mongod
        - --replSet
        - rs0
        - --bind_ip_all
        - --auth
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: healthcare-mongodb-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: healthcare-mongodb
  namespace: healthcare-platform
  labels:
    app: healthcare-mongodb
spec:
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    app: healthcare-mongodb
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: healthcare-elasticsearch
  namespace: healthcare-platform
spec:
  serviceName: healthcare-elasticsearch
  replicas: 3
  selector:
    matchLabels:
      app: healthcare-elasticsearch
  template:
    metadata:
      labels:
        app: healthcare-elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        env:
        - name: discovery.type
          value: single-node
        - name: ES_JAVA_OPTS
          value: -Xms1g -Xmx1g
        - name: xpack.security.enabled
          value: "false"
        - name: xpack.monitoring.enabled
          value: "false"
        - name: xpack.graph.enabled
          value: "false"
        - name: xpack.watcher.enabled
          value: "false"
        - name: xpack.ml.enabled
          value: "false"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /usr/share/elasticsearch/data
        livenessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: elasticsearch-data
        persistentVolumeClaim:
          claimName: healthcare-elasticsearch-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: healthcare-elasticsearch
  namespace: healthcare-platform
  labels:
    app: healthcare-elasticsearch
spec:
  ports:
  - port: 9200
    targetPort: 9200
    name: http
  - port: 9300
    targetPort: 9300
    name: transport
  selector:
    app: healthcare-elasticsearch
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: healthcare-api
  namespace: healthcare-platform
spec:
  replicas: 3
  selector:
    matchLabels:
      app: healthcare-api
  template:
    metadata:
      labels:
        app: healthcare-api
    spec:
      containers:
      - name: api
        image: healthcare-platform/api:latest
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: healthcare-platform-config
        - secretRef:
            name: healthcare-platform-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
        - name: genomic-data
          mountPath: /app/data
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: healthcare-models-pvc
      - name: genomic-data
        persistentVolumeClaim:
          claimName: healthcare-genomic-data-pvc
      serviceAccountName: healthcare-api-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

---
apiVersion: v1
kind: Service
metadata:
  name: healthcare-api
  namespace: healthcare-platform
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: healthcare-api

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: healthcare-worker
  namespace: healthcare-platform
spec:
  replicas: 5
  selector:
    matchLabels:
      app: healthcare-worker
  template:
    metadata:
      labels:
        app: healthcare-worker
    spec:
      containers:
      - name: worker
        image: healthcare-platform/api:latest
        command: ["celery", "worker", "-A", "app.worker", "--loglevel=info"]
        envFrom:
        - configMapRef:
            name: healthcare-platform-config
        - secretRef:
            name: healthcare-platform-secrets
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
        - name: genomic-data
          mountPath: /app/data
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: healthcare-models-pvc
      - name: genomic-data
        persistentVolumeClaim:
          claimName: healthcare-genomic-data-pvc
      serviceAccountName: healthcare-worker-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: healthcare-frontend
  namespace: healthcare-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: healthcare-frontend
  template:
    metadata:
      labels:
        app: healthcare-frontend
    spec:
      containers:
      - name: frontend
        image: healthcare-platform/frontend:latest
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: healthcare-frontend
  namespace: healthcare-platform
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: healthcare-frontend

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: healthcare-platform-ingress
  namespace: healthcare-platform
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.healthcare-platform.com
    - app.healthcare-platform.com
    secretName: healthcare-platform-tls
  rules:
  - host: api.healthcare-platform.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: healthcare-api
            port:
              number: 80
  - host: app.healthcare-platform.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: healthcare-frontend
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: healthcare-api-hpa
  namespace: healthcare-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: healthcare-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: healthcare-worker-hpa
  namespace: healthcare-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: healthcare-worker
  minReplicas: 3
  maxReplicas: 15
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: External
    external:
      metric:
        name: healthcare_queue_length
        selector:
          matchLabels:
            queue: genomic_analysis
      target:
        type: AverageValue
        averageValue: "10"

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: healthcare-api-pdb
  namespace: healthcare-platform
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: healthcare-api

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: healthcare-database-pdb
  namespace: healthcare-platform
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: healthcare-postgresql

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: healthcare-database-backup
  namespace: healthcare-platform
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: postgres:15
            command:
            - /bin/bash
            - -c
            - |
              pg_dump -h healthcare-postgresql -U healthcare_user -d healthcare_db | \
              gzip | \
              aws s3 cp - s3://healthcare-backups/database/$(date +%Y%m%d_%H%M%S).sql.gz
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: healthcare-platform-secrets
                  key: database-password
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: healthcare-platform-secrets
                  key: aws-access-key
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: healthcare-platform-secrets
                  key: aws-secret-key
          restartPolicy: OnFailure

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: healthcare-log-rotation
  namespace: healthcare-platform
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: logrotate
            image: busybox
            command:
            - sh
            - -c
            - |
              find /logs -name "*.log" -mtime +30 -delete
          volumeMounts:
          - name: log-storage
            mountPath: /logs
          volumes:
          - name: log-storage
            persistentVolumeClaim:
              claimName: healthcare-backup-pvc
          restartPolicy: OnFailure

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: healthcare-api-sa
  namespace: healthcare-platform

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: healthcare-worker-sa
  namespace: healthcare-platform

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: healthcare-platform-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: healthcare-platform-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: healthcare-platform-role
subjects:
- kind: ServiceAccount
  name: healthcare-api-sa
  namespace: healthcare-platform
- kind: ServiceAccount
  name: healthcare-worker-sa
  namespace: healthcare-platform

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: healthcare-platform
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "alert_rules.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      - job_name: 'healthcare-api'
        static_configs:
          - targets: ['healthcare-api:80']
        metrics_path: '/metrics'
        scrape_interval: 5s

      - job_name: 'healthcare-postgresql'
        static_configs:
          - targets: ['healthcare-postgresql:5432']
        scrape_interval: 30s

      - job_name: 'healthcare-redis'
        static_configs:
          - targets: ['healthcare-redis-master:6379']
        scrape_interval: 30s

      - job_name: 'healthcare-mongodb'
        static_configs:
          - targets: ['healthcare-mongodb:27017']
        scrape_interval: 30s

      - job_name: 'healthcare-elasticsearch'
        static_configs:
          - targets: ['healthcare-elasticsearch:9200']
        scrape_interval: 30s

  alert_rules.yml: |
    groups:
    - name: healthcare.alerts
      rules:
      - alert: HighAPIErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "High API error rate detected"
          description: "API error rate is {{ $value }}% over the last 5 minutes"

      - alert: DatabaseConnectionIssues
        expr: pg_up == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Database connection lost"
          description: "PostgreSQL database is not responding"

      - alert: HighMemoryUsage
        expr: (1 - node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage detected"
          description: "Memory usage is above 90%"

      - alert: PodRestartRate
        expr: rate(kube_pod_container_status_restarts_total[10m]) > 0.1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High pod restart rate"
          description: "Pods are restarting at a high rate"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: healthcare-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: storage
          mountPath: /prometheus
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: healthcare-platform
spec:
  ports:
  - port: 9090
    targetPort: 9090
  selector:
    app: prometheus
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: healthcare-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: healthcare-platform-secrets
              key: database-password
        volumeMounts:
        - name: storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
      volumes:
      - name: storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: healthcare-platform
spec:
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: grafana
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: healthcare-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      containers:
      - name: alertmanager
        image: prom/alertmanager:latest
        ports:
        - containerPort: 9093
        volumeMounts:
        - name: config
          mountPath: /etc/alertmanager
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
      volumes:
      - name: config
        configMap:
          name: alertmanager-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: healthcare-platform
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'alerts@healthcare-platform.com'
      smtp_auth_username: 'alerts@healthcare-platform.com'
      smtp_auth_password: 'your-smtp-password'

    route:
      group_by: ['alertname']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'email'
      routes:
      - match:
          severity: critical
        receiver: 'critical-email'

    receivers:
    - name: 'email'
      email_configs:
      - to: 'ops@healthcare-platform.com'
        send_resolved: true

    - name: 'critical-email'
      email_configs:
      - to: 'emergency@healthcare-platform.com'
        send_resolved: true

---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: healthcare-platform
spec:
  ports:
  - port: 9093
    targetPort: 9093
  selector:
    app: alertmanager
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fluent-bit
  namespace: healthcare-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: fluent-bit
  template:
    metadata:
      labels:
        app: fluent-bit
    spec:
      containers:
      - name: fluent-bit
        image: fluent/fluent-bit:latest
        volumeMounts:
        - name: config
          mountPath: /fluent-bit/etc
        - name: logs
          mountPath: /var/log
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
      volumes:
      - name: config
        configMap:
          name: fluent-bit-config
      - name: logs
        emptyDir: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: healthcare-platform
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         5
        Log_Level     info
        Daemon        off

    [INPUT]
        Name              tail
        Path              /var/log/containers/*healthcare*.log
        Parser            docker
        Tag               healthcare.*
        Refresh_Interval  5

    [OUTPUT]
        Name  es
        Match healthcare.*
        Host  healthcare-elasticsearch
        Port  9200
        Index healthcare-logs
        Type  log

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: healthcare-security-scan
  namespace: healthcare-platform
spec:
  schedule: "0 3 * * 1"  # Weekly on Monday at 3 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: trivy
            image: aquasecurity/trivy:latest
            command:
            - trivy
            - image
            - --format
            - json
            - --output
            - /scan/results.json
            - healthcare-platform/api:latest
            volumeMounts:
            - name: scan-results
              mountPath: /scan
          volumes:
          - name: scan-results
            emptyDir: {}
          restartPolicy: OnFailure

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: healthcare-backup-verification
  namespace: healthcare-platform
spec:
  schedule: "0 4 * * *"  # Daily at 4 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup-verify
            image: amazonlinux:latest
            command:
            - /bin/bash
            - -c
            - |
              aws s3 ls s3://healthcare-backups/database/ --recursive | tail -1
              if [ $? -eq 0 ]; then
                echo "Backup verification successful"
              else
                echo "Backup verification failed"
                exit 1
              fi
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: healthcare-platform-secrets
                  key: aws-access-key
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: healthcare-platform-secrets
                  key: aws-secret-key
          restartPolicy: OnFailure

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: healthcare-platform

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: healthcare-platform
